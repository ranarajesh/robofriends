{"version":3,"sources":["component/card.js","component/cardlist.js","component/search.js","component/loader.js","component/withloader.js","component/errorPage.js","container/ErrorBoundary.js","container/app.js","serviceWorker.js","index.js"],"names":["Card","robot","className","src","id","alt","name","email","CardList","roboArray","map","i","key","Search","searchChange","type","placeholder","onChange","Loader","class","WithLoader","show","children","ErrorPage","href","ErrorBoundary","state","hasError","this","setState","props","Component","App","searchField","fetchRoboData","a","fetch","ft","json","res","onSearchChange","event","target","value","filterRobots","filter","toLowerCase","includes","length","React","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"8RAceA,EAZF,SAAC,GAAe,IAAbC,EAAY,EAAZA,MACd,OACE,yBAAKC,UAAU,oDACb,yBAAKC,IAAG,+BAA0BF,EAAMG,GAAhC,YAA8CC,IAAKJ,EAAMK,OACjE,6BACE,gCAAML,EAAMK,MACZ,2BAAIL,EAAMM,UCIHC,EAVE,SAAC,GAAmB,IAAjBC,EAAgB,EAAhBA,UAClB,OACE,6BACGA,EAAUC,KAAI,SAACT,EAAOU,GACrB,OAAO,kBAAC,EAAD,CAAMV,MAAOA,EAAOW,IAAKD,SCSzBE,EAbA,SAAC,GAAsB,IAApBC,EAAmB,EAAnBA,aAChB,OACE,yBAAKZ,UAAU,OACb,2BACEa,KAAK,QACLC,YAAY,cACZC,SAAUH,EACVZ,UAAU,sCCJHgB,G,YAFA,kBAAM,yBAAKC,MAAM,aCGjBC,EAJI,SAAC,GAAwB,IAAtBC,EAAqB,EAArBA,KAAMC,EAAe,EAAfA,SAC1B,OAAOD,EAAOC,EAAW,kBAAC,EAAD,OCiEZC,EAlEG,WAChB,OACE,6BAASJ,MAAM,qCACb,4BAAQA,MAAM,kBACZ,wBAAIA,MAAM,+DAAV,OAGA,wBAAIA,MAAM,eAAV,8EAEO,uBAAGK,KAAK,KAAR,iBCMAC,E,4MAbbC,MAAQ,CACNC,UAAU,G,kEAGVC,KAAKC,SAAS,CACZF,UAAU,M,+BAKZ,OADqBC,KAAKF,MAAlBC,SACiC,kBAAC,EAAD,MAAtBC,KAAKE,MAAMR,a,GAXNS,aC2CbC,E,4MAtCbN,MAAQ,CACNjB,UAAW,GACXwB,YAAa,I,EAOfC,c,sBAAgB,8BAAAC,EAAA,sEACGC,MAAM,8CADT,cACRC,EADQ,gBAEIA,EAAGC,OAFP,OAERC,EAFQ,OAGd,EAAKV,SAAS,CAAEpB,UAAW8B,IAHb,2C,EAKhBC,eAAiB,SAACC,GAChB,EAAKZ,SAAS,CAAEI,YAAaQ,EAAMC,OAAOC,S,kEAT1Cf,KAAKM,kB,+BAWG,IAAD,EAC4BN,KAAKF,MAAhCjB,EADD,EACCA,UAAWwB,EADZ,EACYA,YACbW,EAAenC,EAAUoC,QAAO,SAAC5C,EAAOU,GAAR,OACpCV,EAAMK,KAAKwC,cAAcC,SAASd,MAGpC,OACE,kBAAC,EAAD,KACE,yBAAK/B,UAAU,MACb,wBAAIA,UAAU,wBAAd,gBACA,kBAAC,EAAD,CAAQY,aAAcc,KAAKY,iBAE3B,kBAAC,EAAD,CAAYnB,KAAMuB,EAAaI,QAC7B,kBAAC,EAAD,CAAUvC,UAAWmC,W,GA/BfK,IAAMlB,W,MCKJmB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCVNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDuHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.68bd04a6.chunk.js","sourcesContent":["import React from \"react\";\n\nconst Card = ({ robot }) => {\n  return (\n    <div className=\"bg-light-green dib br3 pa3 ma2 grow bw2 shadow-3\">\n      <img src={`https://robohash.org/${robot.id}?100x100`} alt={robot.name} />\n      <div>\n        <h2>J{robot.name}</h2>\n        <p>{robot.email}</p>\n      </div>\n    </div>\n  );\n};\n\nexport default Card;\n","import React from \"react\";\nimport Card from \"./card\";\nconst CardList = ({ roboArray }) => {\n  return (\n    <div>\n      {roboArray.map((robot, i) => {\n        return <Card robot={robot} key={i} />;\n      })}\n    </div>\n  );\n};\n\nexport default CardList;\n","import React from \"react\";\n\nconst Search = ({ searchChange }) => {\n  return (\n    <div className=\"pa2\">\n      <input\n        type=\"input\"\n        placeholder=\"Search here\"\n        onChange={searchChange}\n        className=\"bg-light-green dib br3 pa3 ma2 \"\n      ></input>\n    </div>\n  );\n};\n\nexport default Search;\n","import React from \"react\";\nimport \"./loader.css\";\n\nconst Loader = () => <div class=\"loader\"></div>;\n\nexport default Loader;\n","import React from \"react\";\nimport Loader from \"./loader\";\nconst WithLoader = ({ show, children }) => {\n  return show ? children : <Loader />;\n};\n\nexport default WithLoader;\n","import React from \"react\";\n\nconst ErrorPage = () => {\n  return (\n    <section class=\"vh-100 bg-washed-blue baskerville\">\n      <header class=\"tc ph5 lh-copy\">\n        <h1 class=\"f1 f-headline-l code mb3 fw9 dib tracked-tight light-purple\">\n          404\n        </h1>\n        <h2 class=\"tc f1-l fw1\">\n          Sorry, we can't find the page you are looking for. Please go the home\n          page <a href=\"/\">Home Page</a>\n        </h2>\n      </header>\n      {/* <p class=\"fw1 i tc mt4 mt5-l f4 f3-l\">\n        Are you looking for one of these?\n      </p>\n      <ul class=\"list tc pl0 w-100 mt5\">\n        <li class=\"dib\">\n          <a class=\"f5 f4-ns link black db pv2 ph3 hover-light-purple\" href=\"/\">\n            Home\n          </a>\n        </li>\n        <li class=\"dib\">\n          <a\n            class=\"f5 f4-ns link black db pv2 ph3 hover-light-purple\"\n            href=\"/about\"\n          >\n            About\n          </a>\n        </li>\n        <li class=\"dib\">\n          <a\n            class=\"f5 f4-ns link black db pv2 ph3 hover-light-purple\"\n            href=\"/careers\"\n          >\n            Careers\n          </a>\n        </li>\n        <li class=\"dib\">\n          <a\n            class=\"f5 f4-ns link black db pv2 ph3 hover-light-purple\"\n            href=\"/contact\"\n          >\n            Contact\n          </a>\n        </li>\n        <li class=\"dib\">\n          <a\n            class=\"f5 f4-ns link black db pv2 ph3 hover-light-purple\"\n            href=\"/signup\"\n          >\n            Sign Up\n          </a>\n        </li>\n        <li class=\"dib\">\n          <a\n            class=\"f5 f4-ns link black db pv2 ph3 hover-light-purple\"\n            href=\"/help\"\n          >\n            Help\n          </a>\n        </li>\n      </ul> */}\n    </section>\n  );\n};\n\nexport default ErrorPage;\n","import React, { Component } from \"react\";\nimport ErrorPage from \"../component/errorPage\";\n\nclass ErrorBoundary extends Component {\n  state = {\n    hasError: false,\n  };\n  componentDidCatch() {\n    this.setState({\n      hasError: true,\n    });\n  }\n  render() {\n    const { hasError } = this.state;\n    return !hasError ? this.props.children : <ErrorPage />;\n  }\n}\nexport default ErrorBoundary;\n","import React from \"react\";\nimport CardList from \"../component/cardlist\";\nimport Search from \"../component/search\";\nimport \"./app.css\";\nimport WithLoader from \"../component/withloader\";\nimport ErrorBoundary from \"./ErrorBoundary\";\n\nclass App extends React.Component {\n  state = {\n    roboArray: [],\n    searchField: \"\",\n  };\n\n  componentDidMount() {\n    this.fetchRoboData();\n  }\n\n  fetchRoboData = async () => {\n    const ft = await fetch(\"https://jsonplaceholder.typicode.com/users\");\n    const res = await ft.json();\n    this.setState({ roboArray: res });\n  };\n  onSearchChange = (event) => {\n    this.setState({ searchField: event.target.value });\n  };\n  render() {\n    const { roboArray, searchField } = this.state;\n    const filterRobots = roboArray.filter((robot, i) =>\n      robot.name.toLowerCase().includes(searchField)\n    );\n\n    return (\n      <ErrorBoundary>\n        <div className=\"tc\">\n          <h1 className=\"f1 b ttu baskerville\">Robo Friends</h1>\n          <Search searchChange={this.onSearchChange} />\n\n          <WithLoader show={filterRobots.length}>\n            <CardList roboArray={filterRobots} />\n          </WithLoader>\n        </div>\n      </ErrorBoundary>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./container/app\";\n\nimport \"tachyons\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}