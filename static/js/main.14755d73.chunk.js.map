{"version":3,"sources":["component/card.js","component/cardlist.js","component/search.js","component/loader.js","component/withloader.js","component/errorPage.js","container/ErrorBoundary.js","helper/api.js","container/app.js","redux/search/actions.js","redux/search/types.js","redux/robots/actions.js","redux/robots/types.js","redux/search/reducer.js","redux/robots/reducer.js","redux/store.js","serviceWorker.js","index.js"],"names":["Card","robot","className","src","id","alt","name","email","CardList","roboArray","map","i","key","Search","searchChange","type","placeholder","onChange","Loader","WithLoader","show","children","ErrorPage","href","ErrorBoundary","state","hasError","this","setState","props","Component","getApi","url","a","fetch","response","json","App","requestRobots","searchField","onSearchChange","isPending","filterRobots","robots","filter","toLowerCase","includes","React","connect","searchRobots","dispatch","event","payload","target","value","res","initialState","rootReducers","createLogger","combineReducers","action","Object","assign","error","middleware","thunkMiddleware","store","createStore","applyMiddleware","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.14755d73.chunk.js","sourcesContent":["import React from \"react\";\n\nconst Card = ({ robot }) => {\n  return (\n    <div className=\"bg-light-green dib br3 pa3 ma2 grow bw2 shadow-3\">\n      <img src={`https://robohash.org/${robot.id}?100x100`} alt={robot.name} />\n      <div>\n        <h2>J{robot.name}</h2>\n        <p>{robot.email}</p>\n      </div>\n    </div>\n  );\n};\n\nexport default Card;\n","import React from \"react\";\nimport Card from \"./card\";\nconst CardList = ({ roboArray }) => {\n  return (\n    <div>\n      {roboArray.map((robot, i) => {\n        return <Card robot={robot} key={i} />;\n      })}\n    </div>\n  );\n};\n\nexport default CardList;\n","import React from \"react\";\n\nconst Search = ({ searchChange }) => {\n  return (\n    <div className=\"pa2\">\n      <input\n        type=\"input\"\n        placeholder=\"Search here\"\n        onChange={searchChange}\n        className=\"bg-light-green dib br3 pa3 ma2 \"\n      ></input>\n    </div>\n  );\n};\n\nexport default Search;\n","import React from \"react\";\nimport \"./loader.css\";\n\nconst Loader = () => <div className=\"loader\"></div>;\n\nexport default Loader;\n","import React from \"react\";\nimport Loader from \"./loader\";\nconst WithLoader = ({ show, children }) => {\n  return show ? children : <Loader />;\n};\n\nexport default WithLoader;\n","import React from \"react\";\n\nconst ErrorPage = () => {\n  return (\n    <section className=\"vh-100 bg-washed-blue baskerville\">\n      <header className=\"tc ph5 lh-copy\">\n        <h1 className=\"f1 f-headline-l code mb3 fw9 dib tracked-tight light-purple\">\n          404\n        </h1>\n        <h2 className=\"tc f1-l fw1\">\n          Sorry, we can't find the page you are looking for. Please go the home\n          page <a href=\"/\">Home Page</a>\n        </h2>\n      </header>\n      {/* <p className=\"fw1 i tc mt4 mt5-l f4 f3-l\">\n        Are you looking for one of these?\n      </p>\n      <ul className=\"list tc pl0 w-100 mt5\">\n        <li className=\"dib\">\n          <a className=\"f5 f4-ns link black db pv2 ph3 hover-light-purple\" href=\"/\">\n            Home\n          </a>\n        </li>\n        <li className=\"dib\">\n          <a\n            className=\"f5 f4-ns link black db pv2 ph3 hover-light-purple\"\n            href=\"/about\"\n          >\n            About\n          </a>\n        </li>\n        <li className=\"dib\">\n          <a\n            className=\"f5 f4-ns link black db pv2 ph3 hover-light-purple\"\n            href=\"/careers\"\n          >\n            Careers\n          </a>\n        </li>\n        <li className=\"dib\">\n          <a\n            className=\"f5 f4-ns link black db pv2 ph3 hover-light-purple\"\n            href=\"/contact\"\n          >\n            Contact\n          </a>\n        </li>\n        <li className=\"dib\">\n          <a\n            className=\"f5 f4-ns link black db pv2 ph3 hover-light-purple\"\n            href=\"/signup\"\n          >\n            Sign Up\n          </a>\n        </li>\n        <li className=\"dib\">\n          <a\n            className=\"f5 f4-ns link black db pv2 ph3 hover-light-purple\"\n            href=\"/help\"\n          >\n            Help\n          </a>\n        </li>\n      </ul> */}\n    </section>\n  );\n};\n\nexport default ErrorPage;\n","import React, { Component } from \"react\";\nimport ErrorPage from \"../component/errorPage\";\n\nclass ErrorBoundary extends Component {\n  state = {\n    hasError: false,\n  };\n  componentDidCatch() {\n    this.setState({\n      hasError: true,\n    });\n  }\n  render() {\n    const { hasError } = this.state;\n    return !hasError ? this.props.children : <ErrorPage />;\n  }\n}\nexport default ErrorBoundary;\n","export const getApi = async (url) => {\n  const response = await fetch(url);\n  return await response.json();\n};\n","import React from \"react\";\nimport CardList from \"../component/cardlist\";\nimport Search from \"../component/search\";\nimport \"./app.css\";\nimport WithLoader from \"../component/withloader\";\nimport ErrorBoundary from \"./ErrorBoundary\";\n\nimport { connect } from \"react-redux\";\nimport { setSearchField } from \"../redux/search/actions\";\nimport { requestRobots } from \"../redux/robots/actions\";\n\nclass App extends React.Component {\n  componentDidMount() {\n    this.props.requestRobots();\n  }\n\n  render() {\n    const { searchField, onSearchChange, isPending, robots } = this.props;\n    const filterRobots = robots.filter((robot, i) =>\n      robot.name.toLowerCase().includes(searchField)\n    );\n\n    return (\n      <ErrorBoundary>\n        <div className=\"tc\">\n          <h1 className=\"f1 b ttu baskerville\">Robo Friends</h1>\n          <Search searchChange={onSearchChange} />\n\n          <WithLoader show={!isPending}>\n            <CardList roboArray={filterRobots} />\n          </WithLoader>\n        </div>\n      </ErrorBoundary>\n    );\n  }\n}\n\nconst mapStateToProps = (state) => {\n  return {\n    searchField: state.searchRobots.searchField,\n    isPending: state.requestRobots.isPending,\n    robots: state.requestRobots.robots,\n  };\n};\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    onSearchChange: (event) => dispatch(setSearchField(event.target.value)),\n    requestRobots: () => dispatch(requestRobots()),\n  };\n};\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\n","import { CHANGE_SEARCHFIELD } from \"./types\";\n\nexport const setSearchField = (searchText) => ({\n  type: CHANGE_SEARCHFIELD,\n  payload: searchText,\n});\n","export const CHANGE_SEARCHFIELD = \"CHANGE_SEARCHFIELD\";\n","import {\n  API_ROBOTS_FAILURE,\n  API_ROBOTS_SUCCESS,\n  API_ROBOTS_PENDING,\n} from \"./types\";\n\nimport { getApi } from \"../../helper/api\";\n\nexport const requestRobots = () => async (dispatch) => {\n  dispatch({ type: API_ROBOTS_PENDING });\n  try {\n    const res = await getApi(\"https://jsonplaceholder.typicode.com/users\");\n    dispatch({ type: API_ROBOTS_SUCCESS, payload: res });\n  } catch (e) {\n    dispatch({ type: API_ROBOTS_FAILURE, payload: e });\n  }\n};\n","export const API_ROBOTS_PENDING = \"API_ROBOTS_PENDING\";\nexport const API_ROBOTS_SUCCESS = \"API_ROBOTS_SUCCESS\";\nexport const API_ROBOTS_FAILURE = \"API_ROBOTS_FAILURE\";\n","import { CHANGE_SEARCHFIELD } from \"./types\";\n\nconst initialState = {\n  searchField: \"\",\n};\n\nexport const searchRobots = (state = initialState, action = {}) => {\n  switch (action.type) {\n    case CHANGE_SEARCHFIELD:\n      return Object.assign({}, state, { searchField: action.payload });\n    default:\n      return state;\n  }\n};\n","import {\n  API_ROBOTS_FAILURE,\n  API_ROBOTS_SUCCESS,\n  API_ROBOTS_PENDING,\n} from \"./types\";\nconst initialState = {\n  isPending: false,\n  robots: [],\n};\n\nexport const requestRobots = (state = initialState, action = {}) => {\n  switch (action.type) {\n    case API_ROBOTS_PENDING:\n      return Object.assign({}, state, { isPending: true });\n    case API_ROBOTS_SUCCESS:\n      return Object.assign({}, state, {\n        isPending: false,\n        robots: action.payload,\n      });\n    case API_ROBOTS_FAILURE:\n      return Object.assign({}, state, { error: action.payload });\n    default:\n      return state;\n  }\n};\n","import { createStore, combineReducers, applyMiddleware } from \"redux\";\nimport { createLogger } from \"redux-logger\";\nimport thunkMiddleware from \"redux-thunk\";\nimport { searchRobots } from \"./search/reducer\";\nimport { requestRobots } from \"./robots/reducer\";\n\nconst logger = createLogger();\n\nconst rootReducers = combineReducers({ searchRobots, requestRobots });\nlet middleware = [thunkMiddleware];\nif (process.env.NODE_ENV === \"development\") {\n  middleware = [...middleware, logger];\n}\n\nconst store = createStore(rootReducers, applyMiddleware(...middleware));\n\nexport default store;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./container/app\";\nimport store from \"./redux/store\";\nimport { Provider } from \"react-redux\";\n\nimport \"tachyons\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}